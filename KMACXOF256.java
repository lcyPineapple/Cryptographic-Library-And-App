/**This File the high level implementation of KMACXOF256
 * according to the NIST Specification.
 * KMACXOF256(K, X, L, S):
 *		Validity Conditions: len(K) <22040 and 0 ≤ L and len(S) < 22040
 *		1. newX = bytepad(encode_string(K), 136) || X || right_encode(0).
 *		2. return cSHAKE256(newX, L, “KMAC”, S). 
 *
 * @author Leika Yamada
 * @date 5/28/2021
 * */
public class KMACXOF256 {
	
	/* This method right encodes large integers
	   *  into a byte array.
	   *  @param x int x, the integer to encode
	   *  @return byte[] the byte string generated by the integer
	   * */
	public static byte[] theKMACXOF256(String k, byte[] m, int L, String S) {
		byte[] end = LREncode.right_Encode(0);
		byte[] result = new byte[m.length + end.length];
		System.arraycopy(m, 0, result, 0, m.length);
		System.arraycopy(end, 0, result, m.length, end.length);
		
		byte[] mybytepad = bytepadES.bytepad(bytepadES.encode_String(k.getBytes()), 136);
		byte[] newX = new byte[result.length + mybytepad.length];
		System.arraycopy(mybytepad, 0, newX, 0, mybytepad.length);
		System.arraycopy(result, 0, newX, mybytepad.length, result.length);
		return cSHAKE256.thecSHAKE256(newX, L, "KMAC", S);
		//return end; 
	} 
}
